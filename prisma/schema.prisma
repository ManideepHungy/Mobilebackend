generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    Int                  @id @default(autoincrement())
  name                  String               @unique
  address               String?
  incoming_dollar_value Decimal?             @default(10) @db.Decimal(10, 2)
  email                 String
  mealsvalue            Decimal?             @default(10) @db.Decimal(10, 2)
  donations             Donation[]
  categories            DonationCategory[]
  donors                Donor[]
  recurringShifts       RecurringShift[]
  shifts                Shift[]
  shiftCategories       ShiftCategory[]
  termsAndConditions    TermsAndConditions[]
  users                 User[]
  WeighingCategory      WeighingCategory[]
}

model User {
  id                       Int                    @id @default(autoincrement())
  email                    String                 @unique
  phone                    String?                @unique
  password                 String
  firstName                String
  lastName                 String
  createdAt                DateTime               @default(now())
  organizationId           Int
  role                     UserRole               @default(VOLUNTEER)
  resetToken               String?
  resetTokenExpiry         DateTime?
  updatedAt                DateTime               @updatedAt
  approvedAt               DateTime?
  approvedBy               Int?
  denialReason             String?
  deniedAt                 DateTime?
  deniedBy                 Int?
  status                   UserStatus             @default(PENDING)
  address                  String?
  allergies                String?
  birthdate                DateTime?
  canCallIfShortHanded     Boolean?               @default(true)
  city                     String?
  emergencyContactName     String?
  emergencyContactNumber   String?
  homePhone                String?
  medicalConcerns          String?
  parentGuardianEmail      String?
  parentGuardianName       String?
  postalCode               String?
  preferredDays            String?
  preferredPrograms        String?
  preferredShifts          String?
  profilePictureUrl        String?
  registrationType         RegistrationType?      @default(ADULT)
  requiredHours            Int?
  schoolWorkCommitment     Boolean?               @default(false)
  startDate                DateTime?
  ageBracket               String?
  communicationPreferences String?
  frequency                String?
  howDidYouHear            String?
  pronouns                 String?
  shiftSignups             ShiftSignup[]
  organization             Organization           @relation(fields: [organizationId], references: [id])
  agreements               UserAgreement[]
  modulePermissions        UserModulePermission[]
}

model ShiftCategory {
  id              Int              @id @default(autoincrement())
  name            String
  icon            String?
  organizationId  Int
  recurringShifts RecurringShift[]
  shifts          Shift[]
  organization    Organization     @relation(fields: [organizationId], references: [id])

  @@unique([name, organizationId])
}

model Shift {
  id               Int             @id @default(autoincrement())
  name             String
  shiftCategoryId  Int
  startTime        DateTime
  endTime          DateTime
  location         String
  slots            Int
  organizationId   Int
  isActive         Boolean         @default(true)
  recurringShiftId Int?
  donations        Donation[]
  organization     Organization    @relation(fields: [organizationId], references: [id])
  RecurringShift   RecurringShift? @relation(fields: [recurringShiftId], references: [id])
  shiftCategory    ShiftCategory   @relation(fields: [shiftCategoryId], references: [id])
  shiftSignups     ShiftSignup[]
}

model ShiftSignup {
  id          Int        @id @default(autoincrement())
  userId      Int
  shiftId     Int
  checkIn     DateTime?
  checkOut    DateTime?
  mealsServed Int?
  createdAt   DateTime   @default(now())
  donations   Donation[]
  shift       Shift      @relation(fields: [shiftId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model Donor {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  location    String?
  contactInfo String?
  kitchenId   Int
  donations   Donation[]
  kitchen     Organization @relation(fields: [kitchenId], references: [id])
}

model Donation {
  id             Int            @id @default(autoincrement())
  shiftId        Int?
  organizationId Int
  donorId        Int
  shiftSignupId  Int?
  createdAt      DateTime       @default(now())
  summary        Float
  donor          Donor          @relation(fields: [donorId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id])
  shift          Shift?         @relation(fields: [shiftId], references: [id])
  shiftSignup    ShiftSignup?   @relation(fields: [shiftSignupId], references: [id])
  items          DonationItem[]
}

model DonationCategory {
  id             Int            @id @default(autoincrement())
  name           String
  organizationId Int
  icon           String?
  organization   Organization   @relation(fields: [organizationId], references: [id])
  items          DonationItem[]
}

model DonationItem {
  id         Int              @id @default(autoincrement())
  donationId Int
  categoryId Int
  weightKg   Float
  category   DonationCategory @relation(fields: [categoryId], references: [id])
  donation   Donation         @relation(fields: [donationId], references: [id])

  @@unique([donationId, categoryId])
}

model RecurringShift {
  id                      Int                      @id @default(autoincrement())
  name                    String
  dayOfWeek               Int?
  startTime               DateTime
  endTime                 DateTime
  shiftCategoryId         Int
  location                String
  slots                   Int
  organizationId          Int
  isRecurring             Boolean                  @default(true)
  isActive                Boolean                  @default(true)
  organization            Organization             @relation(fields: [organizationId], references: [id])
  shiftCategory           ShiftCategory            @relation(fields: [shiftCategoryId], references: [id])
  Shift                   Shift[]
  ShiftRegistrationFields ShiftRegistrationFields?
}

model WeighingCategory {
  id             Int          @id @default(autoincrement())
  organizationId Int
  kilogram_kg_   Float        @map("kilogram(kg)")
  pound_lb_      Float        @map("pound(lb)")
  category       String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([category, organizationId])
}

model Module {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  description           String?
  RoleDefaultPermission RoleDefaultPermission[]
  permissions           UserModulePermission[]
}

model UserModulePermission {
  id             Int     @id @default(autoincrement())
  userId         Int
  organizationId Int
  moduleId       Int
  canAccess      Boolean @default(false)
  module         Module  @relation(fields: [moduleId], references: [id])
  user           User    @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId, moduleId])
}

model TermsAndConditions {
  id             Int             @id @default(autoincrement())
  organizationId Int
  version        String
  title          String
  fileUrl        String
  fileName       String
  fileSize       Int
  isActive       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      Int?
  organization   Organization    @relation(fields: [organizationId], references: [id])
  agreements     UserAgreement[]

  @@unique([organizationId, version])
}

model UserAgreement {
  id                   Int                @id @default(autoincrement())
  userId               Int
  organizationId       Int
  termsAndConditionsId Int
  signature            String
  signedDocumentUrl    String?
  acceptedAt           DateTime           @default(now())
  ipAddress            String?
  userAgent            String?
  termsAndConditions   TermsAndConditions @relation(fields: [termsAndConditionsId], references: [id])
  user                 User               @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId, termsAndConditionsId])
}

model ShiftRegistrationFields {
  id                              Int            @id @default(autoincrement())
  requireFirstName                Boolean        @default(true)
  requireLastName                 Boolean        @default(true)
  requireEmail                    Boolean        @default(true)
  requireAgeBracket               Boolean        @default(false)
  requireBirthdate                Boolean        @default(false)
  requirePronouns                 Boolean        @default(false)
  requirePhone                    Boolean        @default(false)
  requireAddress                  Boolean        @default(false)
  requireCity                     Boolean        @default(false)
  requirePostalCode               Boolean        @default(false)
  requireHomePhone                Boolean        @default(false)
  requireEmergencyContactName     Boolean        @default(false)
  requireEmergencyContactNumber   Boolean        @default(false)
  requireCommunicationPreferences Boolean        @default(false)
  requireProfilePictureUrl        Boolean        @default(false)
  requireAllergies                Boolean        @default(false)
  requireMedicalConcerns          Boolean        @default(false)
  requirePreferredDays            Boolean        @default(false)
  requirePreferredShifts          Boolean        @default(false)
  requireFrequency                Boolean        @default(false)
  requirePreferredPrograms        Boolean        @default(false)
  requireCanCallIfShortHanded     Boolean        @default(false)
  requireSchoolWorkCommitment     Boolean        @default(false)
  requireRequiredHours            Boolean        @default(false)
  requireHowDidYouHear            Boolean        @default(false)
  requireStartDate                Boolean        @default(false)
  requireParentGuardianName       Boolean        @default(false)
  requireParentGuardianEmail      Boolean        @default(false)
  createdAt                       DateTime       @default(now())
  updatedAt                       DateTime
  recurringShiftId                Int            @unique
  RecurringShift                  RecurringShift @relation(fields: [recurringShiftId], references: [id], onDelete: Cascade)
}

model RoleDefaultPermission {
  id        Int      @id @default(autoincrement())
  role      UserRole
  moduleId  Int
  canAccess Boolean  @default(false)
  Module    Module   @relation(fields: [moduleId], references: [id])

  @@unique([role, moduleId])
}

enum UserRole {
  VOLUNTEER
  STAFF
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  DENIED
}

enum RegistrationType {
  ADULT
  MINOR
}

enum AgeBracket {
  UNDER_16
  AGE_16_29
  AGE_30_39
  AGE_40_49
  AGE_50_59
  AGE_60_69
  AGE_70_PLUS
}

enum Pronouns {
  HE_HIM
  SHE_HER
  THEY_THEM
  PREFER_NOT_TO_SAY
}

enum CommunicationPreference {
  EMAIL
  SMS
  APP_NOTIFICATION
}

enum Frequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
  DAILY
  ONCE
  WHEN_TIME_PERMITS
}

enum HowDidYouHear {
  FAMILY_FRIENDS
  GOOGLE
  SOCIAL_MEDIA
  CONNECT_FREDERICTON
  SCHOOL
  WORK
  NOTICE_BOARDS
  EVENTS
}
