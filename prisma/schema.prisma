generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    Int                  @id @default(autoincrement())
  name                  String               @unique
  address               String?
  incoming_dollar_value Float?               @default(10)
  email                 String
  donations             Donation[]
  categories            DonationCategory[]
  donors                Donor[]
  recurringShifts       RecurringShift[]
  shifts                Shift[]
  shiftCategories       ShiftCategory[]
  termsAndConditions    TermsAndConditions[]
  users                 User[]
  WeighingCategory      WeighingCategory[]
}

model User {
  id                Int                    @id @default(autoincrement())
  email             String                 @unique
  phone             String?                @unique
  password          String
  firstName         String
  lastName          String
  createdAt         DateTime               @default(now())
  organizationId    Int
  role              UserRole               @default(VOLUNTEER)
  status            UserStatus             @default(PENDING)
  approvedBy        Int?
  approvedAt        DateTime?
  deniedBy          Int?
  deniedAt          DateTime?
  denialReason      String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  updatedAt         DateTime               @updatedAt
  
  // NEW FIELDS - ALL NULLABLE FOR BACKWARD COMPATIBILITY
  // Registration Type
  registrationType  RegistrationType?      @default(ADULT)
  
  // Personal Information
  ageBracket        String?
  birthdate         DateTime?
  pronouns          String?
  
  // Contact & Address
  address           String?
  city              String?
  postalCode        String?
  homePhone         String?
  
  // Emergency Contact
  emergencyContactName    String?
  emergencyContactNumber  String?
  
  // Communication Preferences
  communicationPreferences String?
  
  // Profile
  profilePictureUrl String?
  
  // Health & Safety
  allergies         String?
  medicalConcerns   String?
  
  // Volunteering Preferences
  preferredDays     String?
  preferredShifts   String?
  frequency         String?
  preferredPrograms String?
  canCallIfShortHanded Boolean?            @default(true)
  
  // Commitment Details
  schoolWorkCommitment Boolean?            @default(false)
  requiredHours     Int?
  
  // Additional Information
  howDidYouHear     String?
  startDate         DateTime?
  
  // Youth Volunteer Information (for minors)
  parentGuardianName    String?
  parentGuardianEmail   String?
  
  // EXISTING RELATIONS - UNCHANGED
  shiftSignups      ShiftSignup[]
  organization      Organization           @relation(fields: [organizationId], references: [id])
  agreements        UserAgreement[]
  modulePermissions UserModulePermission[]
}

model ShiftCategory {
  id              Int              @id @default(autoincrement())
  name            String
  icon            String?
  organizationId  Int
  recurringShifts RecurringShift[]
  shifts          Shift[]
  organization    Organization     @relation(fields: [organizationId], references: [id])

  @@unique([name, organizationId])
}

model Shift {
  id              Int           @id @default(autoincrement())
  name            String
  shiftCategoryId Int
  startTime       DateTime
  endTime         DateTime
  location        String
  slots           Int
  organizationId  Int
  donations       Donation[]
  organization    Organization  @relation(fields: [organizationId], references: [id])
  shiftCategory   ShiftCategory @relation(fields: [shiftCategoryId], references: [id])
  shiftSignups    ShiftSignup[]
}

model ShiftSignup {
  id          Int        @id @default(autoincrement())
  userId      Int
  shiftId     Int
  checkIn     DateTime?
  checkOut    DateTime?
  mealsServed Int?
  createdAt   DateTime   @default(now())
  donations   Donation[]
  shift       Shift      @relation(fields: [shiftId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model Donor {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  location    String?
  contactInfo String?
  kitchenId   Int
  donations   Donation[]
  kitchen     Organization @relation(fields: [kitchenId], references: [id])
}

model Donation {
  id             Int            @id @default(autoincrement())
  shiftId        Int
  organizationId Int
  donorId        Int
  shiftSignupId  Int?
  createdAt      DateTime       @default(now())
  summary        Float
  donor          Donor          @relation(fields: [donorId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id])
  shift          Shift          @relation(fields: [shiftId], references: [id])
  shiftSignup    ShiftSignup?   @relation(fields: [shiftSignupId], references: [id])
  items          DonationItem[]
}

model DonationCategory {
  id             Int            @id @default(autoincrement())
  name           String
  organizationId Int
  icon           String?
  organization   Organization   @relation(fields: [organizationId], references: [id])
  items          DonationItem[]
}

model DonationItem {
  id         Int              @id @default(autoincrement())
  donationId Int
  categoryId Int
  weightKg   Float
  category   DonationCategory @relation(fields: [categoryId], references: [id])
  donation   Donation         @relation(fields: [donationId], references: [id])
}

model RecurringShift {
  id              Int           @id @default(autoincrement())
  name            String
  dayOfWeek       Int
  startTime       DateTime
  endTime         DateTime
  shiftCategoryId Int
  location        String
  slots           Int
  organizationId  Int
  organization    Organization  @relation(fields: [organizationId], references: [id])
  shiftCategory   ShiftCategory @relation(fields: [shiftCategoryId], references: [id])
}

model WeighingCategory {
  id             Int          @id @default(autoincrement())
  organizationId Int
  kilogram_kg_   Float        @map("kilogram(kg)")
  pound_lb_      Float        @map("pound(lb)")
  category       String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([category, organizationId])
}

model Module {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique
  description String?
  permissions UserModulePermission[]
}

model UserModulePermission {
  id             Int     @id @default(autoincrement())
  userId         Int
  organizationId Int
  moduleId       Int
  canAccess      Boolean @default(false)
  module         Module  @relation(fields: [moduleId], references: [id])
  user           User    @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId, moduleId])
}

model TermsAndConditions {
  id             Int             @id @default(autoincrement())
  organizationId Int
  version        String
  title          String
  fileUrl        String
  fileName       String
  fileSize       Int
  isActive       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      Int?
  organization   Organization    @relation(fields: [organizationId], references: [id])
  agreements     UserAgreement[]

  @@unique([organizationId, version])
}

model UserAgreement {
  id                   Int                @id @default(autoincrement())
  userId               Int
  organizationId       Int
  termsAndConditionsId Int
  signature            String
  signedDocumentUrl    String?
  acceptedAt           DateTime           @default(now())
  ipAddress            String?
  userAgent            String?
  termsAndConditions   TermsAndConditions @relation(fields: [termsAndConditionsId], references: [id])
  user                 User               @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId, termsAndConditionsId])
}

enum UserRole {
  VOLUNTEER
  STAFF
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  DENIED
}

enum RegistrationType {
  ADULT
  MINOR
}

enum AgeBracket {
  UNDER_16
  AGE_16_29
  AGE_30_39
  AGE_40_49
  AGE_50_59
  AGE_60_69
  AGE_70_PLUS
}

enum Pronouns {
  HE_HIM
  SHE_HER
  THEY_THEM
  PREFER_NOT_TO_SAY
}

enum CommunicationPreference {
  EMAIL
  SMS
  APP_NOTIFICATION
}

enum Frequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
  DAILY
  ONCE
  WHEN_TIME_PERMITS
}

enum HowDidYouHear {
  FAMILY_FRIENDS
  GOOGLE
  SOCIAL_MEDIA
  CONNECT_FREDERICTON
  SCHOOL
  WORK
  NOTICE_BOARDS
  EVENTS
}
